{"dataFolder":"D:\\Temp\\Documentation\\Data","templatesFolder":"D:\\Temp\\Documentation\\Templates","liquidList":["{%- assign sharedTime = \"now\" | date: \"%Y-%m-%d %H:%M:%S\" -%}","{%- assign sharedTime = \"now\" | date: \"%Y-%m-%d %H:%M:%S\" -%}"],"cells":[{"kind":1,"language":"markdown","value":"# Getting Started with Liquid Notebooks\r\n\r\nThis is a guide to get to know the *Visual Studio Code extension for Liquid Notebooks*. A Liquid Notebook can contain markdown blocks (text) and code blocks. Code blocks support (HTML) Liquid, but also offers a built-in `Settings` language. We demonstrate the use of the various components in this notebook. To get familiar with the Liquid template language, the [Shopify Liquid language reference](https://shopify.github.io/liquid/basics/introduction/) can be used or you can follow the [Getting Started with Liquid](./getting-started-with-liquid.liquidbook) guide.\r\n\r\nThis document references a fake dataset. You can download [this fake data zip-file](../.attachments/notebook-fake-dataset.zip) and extract it in a folder on your local disk.\r\n\r\n## Settings for the environment\r\n\r\nThe `Settings` language is used to defined settings for the specific notebook. The most important settings are for the location of **data files** and for **templates**. These settings are used parsing Liquid code blocks, to provide your own data and your own templates for use in the Liquid code. Lines beginning with a `#` are treated as comment lines. The commands for defining the environment, including verbose and validation commands are:\r\n\r\n| Command | Description |\r\n| --- | --- |\r\n| DATA [folder] | Set the location of a folder containing data-files like Parquet files and CSV files. It can be relative to the folder of the notebook |\r\n| TEMPLATES [folder] | Set the location of a folder containing Liquid templates. It can be relative to the folder of the notebook |\r\n| VALIDATE | Validate the given paths. If either of the paths cannot be found, an error will be displayed |\r\n| VERBOSE [on/off] | Show or hide verbose output of the commands |\r\n\r\nIf you don't set the data- and/or template-folder, the Liquid parsing will work. However if you reference your own data tables and fields or include (or render) your own templates, you will see no result of data or errors on loading referenced templates.\r\n\r\n> **NOTE:** Currently there is a problem to determine the path of the open notebook. This also caused problems using relative paths. To make sure you don't have these issues now, use an absolute path to your data and template folders. Resolving relative paths can fail from time to time. [A feature request](https://github.com/microsoft/vscode/issues/138523) is filed with the vscode team for this.\r\n\r\nBelow a `Settings` code sample to set the data- and template-folder in this notebook:"},{"kind":2,"language":"liquid-notebook-settings","value":"VERBOSE ON\r\n\r\n# Use relative paths to the current notebook \r\nDATA D:\\Temp\\Documentation\\Data\r\nTEMPLATES D:\\Temp\\Documentation\\Templates\r\n\r\n# Validate the paths\r\nVALIDATE"},{"kind":1,"language":"markdown","value":"## Liquid code blocks\r\n\r\nLiquid code blocks can contain all kinds of content combined with Liquid commands. By running a Liquid code block, an internal Liquid Parser will be executed. The parser will combine data, templates and your Liquid code and output that below the code block. We will try to determine the format of that output to have it rendered as best as possible. Currently we mainly discover HTML content and JSON content. All others (or on error) will be shown in plain text. If JSON parser errors are discovered, we also show the error at the beginning of the output.\r\n\r\nBelow an example of a simple, text only, Liquid code block that doesn't address external data. It gets the current date and time and formats it. The value is assigned to a variable called `processTime`. That variable is then used in a text output."},{"kind":2,"language":"liquid","value":"{%- assign processTime = \"now\" | date: \"%Y-%m-%d %H:%M:%S\" -%}\r\n\r\nThis block was processed on {{ processTime }}"},{"kind":1,"language":"markdown","value":"The same example, but then a as JSON output with a self-defined structure:"},{"kind":2,"language":"liquid","value":"{%- assign processTime = \"now\" | date: \"%Y-%m-%d %H:%M:%S\" -%}\r\n{\r\n    \"processTime\": \"{{ processTime }}\"\r\n}"},{"kind":1,"language":"markdown","value":"And lastly, the same example but now in self-defined HTML output (‚ö†Ô∏è warning for possible [interface poisoning](https://dilbert.com/strip/2002-09-24) üòÖ ‚ö†Ô∏è):"},{"kind":2,"language":"liquid","value":"{%- assign processTime = \"now\" | date: \"%Y-%m-%d %H:%M:%S\" -%}\r\n<html><body>\r\n<h3 style=\"color:red\">HTML Sample</h3>\r\n<div style=\"color:violet\">This HTML page was processed at <b  style=\"color:green\">{{ processTime }}</b></div>\r\n</body></html>"},{"kind":1,"language":"markdown","value":"## Reuse of variables in Liquid code blocks\r\n\r\nCurrently there is no mechanism to make Liquid code public from a Liquid code block. So, if you define a variable using the Liquid `assign` command in code block 1, you cannot reference that variable in code block 2. There is however a way to solve this. With a `Settings` code block you can add Liquid commands to a list. This list is always prepended for every Liquid code block. So if you want to reuse a variable in other code blocks, add the assign command to the list. In every Liquid code block you can then reference that variable. To demonstrate we can add the `assign` from the previous code block to the list, but then with the variable name `sharedTime`:"},{"kind":2,"language":"liquid","value":"ADD {%- assign sharedTime = \"now\" | date: \"%Y-%m-%d %H:%M:%S\" -%}"},{"kind":1,"language":"markdown","value":"Now we can reference the `sharedTime` variable in any Liquid code block. \r\n\r\n> NOTE: The actual date is processed during the execution of the Liquid code block, not when you add it to the list."},{"kind":2,"language":"liquid","value":"This block was processed on {{ sharedTime }}. The shared variable was defined using the Settings list."},{"kind":1,"language":"markdown","value":"There are 4 commands to work with the list in a `Settings` code block:\r\n\r\n| Command | Description |\r\n| --- | --- |\r\n| CLEAR | Clear the list of Liquid commands |\r\n| LIST | List registered liquid commands |\r\n| ADD [Liquid command] | Add the Liquid command to the list. The command is not validated! |\r\n| REMOVE [index] | Remove the Liquid command on the given index position (starting with 1). |"},{"kind":1,"language":"markdown","value":"## Extra extensions\r\n\r\nOther useful extensions are installed with the Visual Studio Code extension for Liquid Notebooks. The first one is the [Liquid Language Support](https://marketplace.visualstudio.com/items?itemName=neilding.language-liquid) extension for syntax highlighting. The second one is the [Shopify Liquid Template Snippets for VS Code](https://marketplace.visualstudio.com/items?itemName=killalau.vscode-liquid-snippets) extension for adding easy code snippets for Liquid code. A few snippets:\r\n\r\n* `for-` - generates a for loop\r\n* `assign-` - generates an assign statement\r\n\r\nAnd much more are supported. They are listed on the link above of the extension.\r\n\r\n## Playground\r\n\r\nIf you want to experiment with this notebook further, you can use the code block below or create your own. Have fun!"},{"kind":2,"language":"liquid","value":"{{ \"hello liquid playground!\" | capitalize }}"}]}